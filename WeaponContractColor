pragma solidity ^0.5.6;


import "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721Full.sol";
import "github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/ownership/Ownable.sol";
import "./RicardoToken.sol";


contract WeaponToken is ERC721Full, Ownable {
  event NewWeapon(uint weaponId, string name, uint32 color, uint32 size);

  uint dnaDigits = 16;
  uint dnaModulus = 10 ** dnaDigits;
  
  uint createWeaponFee = 0.001 ether;
  uint creationUpFee = 5;
  uint createFeeCorrected = 1;
  uint weaponPrice = 1;
  
  struct Weapon {
    string name;
    uint32 color;
    uint32 size;
    uint64 birthTime;
  }
  
  struct Auction{
      uint weaponId;
      uint maxBids;
      uint bestBid;
      uint currentParticipants;
      address currentWinner;
      bool finished;
  }
  
  constructor() public ERC721Full("WeaponToken","WEAPON"){
      
  }



  Weapon[] public weapons;
  mapping (uint => address) public weaponIndexToOwner;
  mapping (address => uint) ownerWeaponCount;
  RicardoToken tokenContract;
  Auction currentAuction;
  
  function setRicardoToken(address payable novoRicardo) external onlyOwner  {
      tokenContract = RicardoToken(novoRicardo);
  }

  function _createWeapon(string memory _name, uint32 color, uint32 size) internal {
    uint id = weapons.push(Weapon(_name, color, size, uint64(now))) - 1;
    weaponIndexToOwner[id] = msg.sender;
    ownerWeaponCount[msg.sender]++;
    emit NewWeapon(id, _name, color, size);
  }

  function createWeapon(string calldata _name, uint32 _colorHex, uint32 _size) external payable {   
    require(msg.value == createWeaponFee);
    require(ownerWeaponCount[msg.sender] < 10);
    _createWeapon(_name, _colorHex, _size);
  }
  
  modifier haveBalance{
    require(tokenContract.balanceOf(msg.sender) >= creationUpFee);
    _;
  }
  
  function beginAuction(uint _weaponId, uint _maxParticipants) external {
      require(msg.sender == weaponIndexToOwner[_weaponId]);
      currentAuction = Auction(_weaponId, _maxParticipants, 0, 0, msg.sender, false);
  }
  
  function bid(uint value) external returns(string memory message){
      require(tokenContract.balanceOf(msg.sender) >= value);
      require(!currentAuction.finished);
      if (value > currentAuction.bestBid){
          currentAuction.bestBid = value;
          currentAuction.currentWinner = msg.sender;
      }
      currentAuction.currentParticipants++;
      if (currentAuction.currentParticipants >= currentAuction.maxBids){
          tokenContract.pay(currentAuction.currentWinner, weaponIndexToOwner[currentAuction.weaponId], currentAuction.bestBid);
          weaponIndexToOwner[currentAuction.weaponId] = currentAuction.currentWinner;
          currentAuction.finished = true;
          return "Auction finished!";
      }
      return "Auction still running!";
  }

  function buyWeaponFrom(address buyer, address seller, uint weaponId) external payable {
     require(seller == weaponIndexToOwner[weaponId]);
     require(tokenContract.balanceOf(buyer) > weaponPrice);
     tokenContract.pay(buyer, seller, weaponPrice);
     weaponPrice += 1;
     weaponIndexToOwner[weaponId] = buyer;
  }
  
  function _multiplyColors(uint32 color1, uint32 color2) private pure returns(uint32 finalColor){
    uint8 red1   = uint8((color1 / 2 ** 16) & 0xFF); //x >> y is equivalent to x / 2**y
    uint8 green1 = uint8((color1 / 2 **  8) & 0xFF);
    uint8 blue1  = uint8(color1            & 0xFF);
    
    uint8 red2   = uint8((color2 / 2 ** 16) & 0xFF);
    uint8 green2 = uint8((color2 / 2 **  8) & 0xFF);
    uint8 blue2  = uint8(color2            & 0xFF);
    
    uint8 newRed = red1 * red2;
    uint8 newGreen = green1 * green2;
    uint8 newBlue = blue1 * blue2;
    
    return (newRed * 2 ** 16) | (newGreen * 2 ** 8) | newBlue;
  }
  
  
  function mixWeaponDna(string calldata _name,uint weaponId, uint weaponId2)external payable{
    require(msg.sender == weaponIndexToOwner[weaponId]);
    require(msg.sender == weaponIndexToOwner[weaponId2]);
    Weapon storage myWeapon = weapons[weaponId];
    Weapon storage myWeapon2 = weapons[weaponId2];
    
    //size
    myWeapon.size += myWeapon2.size;
    uint32 newWeaponSize = (myWeapon.size) / 2;
    
    
    _createWeapon(_name, _multiplyColors(myWeapon.color, myWeapon2.color), newWeaponSize);
  }

}
